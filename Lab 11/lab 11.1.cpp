#include <iostream>
using namespace std;

struct List {			// Создание структуры списка
	char data;			// Значение элемента списка
	List* next;			// Указатель след элемента
};

List* make(int size){
	List* first, *p;
	first = NULL;					// Пока нет элементов, first указывает на NULL
	cout << "Введите 1 элемент: ";
	p = new List;					// Выделаем память под элемент
	cin >> p->data;					// Вводим его значение
	first = p;						// first указывает на первый элемент
	for(int i=2; i <=size; i++){	// Начинае со 2 элемента до размера, тк первый ввели выше
		List* h = new List;			// Выделяем память под новый элемент
		p->next = h;				// Создаем указатель след элемента
		p = p->next;				// Переходим на следующий элемент
		cout << "Введите " << i << " элемент: ";
		cin >> p->data;				// Вводим его значение
		p->next = NULL;				// Указатель след элемента NULL,т.к. это последний элемент
	}
	return first;					// Возвращаем указатель на первый элемент списка
}

void print(List*first) {
	if (first == NULL) {             		// Проверка на пустоту списка
		cout << "Список пустой" << endl;
	}else{									
		List* p = first;					// p указывает на первый элемент
		while (p != NULL) {					// Последовательный вывод всех элементов
			cout << p->data << " ";      	// Списка, пока p не будет указывать 
			p = p->next;                    // На NULL
		}
		cout << endl;
	}
}

void del(List* &first) {
	List* p = first;
	char k; 
	cout << "Введите элемент, который необходимо удалить: " << endl;
	cin >> k;
	while(p->data == k) {	// Проверяем все подходящие с первой, идущие в ряд
		List* q = first; 	// Записываем в q данные первого элемента
		first = p->next;	// Первым элементом становится следующий
		delete q;			// Удаляем подходящий элемент
		p = first;			// Обнуляем p до нового первого элемента
	}
	while (p->next != NULL) {			/* Так как мы проверили все подходящие в начале
										Значит элемент на месте p не подходит =>
										Начинаем со следующего от p элемента
										Пока не пройдем все элементы*/
		if (p->next->data == k) {		// Проверяем значение
			List* q = p->next;			// Если условие выполняется делаем замену
			p->next = p->next->next;	// Как в прошлом цикле, только со сдвигом
			delete q;
		}
		else p = p->next;				// В ином случае просто переходим на след элемент
	}
}

void add(List* &first, int n) {
	int k;
	cout << "Введите кол-во добавляемых элементов: " << endl;
	cin >> k;
	int x;
	cout << "Введите номер элемента перед которым необходимо добавить" << endl;
	cin >> x;
	List* p = first;
	char arr[k];
	for(int i=0;i<k;i++){
		cout << "Введите " << i+1 << " новый элемент: " << endl;
		cin >> arr[i];
	}
	if(x==1){								// Если надо добавить элементы в начало списка
		for (int i = k-1; i >= 0; i--) {	
			List* h = new List;				// Создаем новый элемент
			h->data=arr[i];					// Записываем в него значение
			h->next = first;				// Первый, который был становится вторым
			first = h;						// А этот становится первым
		}
	}else{
		for(int i=1;i<x-1;i++){				// Если надо добавить не в начало
			p=p->next;						// То сдвигаем p до необходимого порядка
		}
		for (int i = k-1; i >= 0; i--) {	// Затем добавляем элементы
			List* h = new List;				// Все как в предыдущем случае
			h->data = arr[i];				// Только first меняется на p->next
			h->next = p->next;				// Так как мы не в начале списка
			p->next = h;
		}
	}
} 



int main() {
	setlocale(LC_ALL, "Rus");
	int size;
	cout << "Введите размер списка" << endl;
	cin >> size;
	
	List* list = make(size); 			// Функция создание списка
	cout << "Ваш список: " << endl;
	print(list);						// Функция вывода списка
	del(list);			   				// Функция удаления элемента с заданным ключом из списка
	cout << "Список после удаления: ";
	print(list);          				// Функция вывода списка
	add(list,size);						// Вызов функции с добавлением k элементов перед элементом с заданным номером
	cout << "Cписок c добавлением: ";
	print(list);       				   	// Функция вывода списка
	return 0;

}
