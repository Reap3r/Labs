#include <iostream>
using namespace std;

struct List {		// Создаем структуру двунаправленного списка
	char data;		// Значение списка
	List* next;		// Указатель след элемента
	List* prev;		// Указатель предыдущего элемента
};

List*  make(int size) {
	List* first, *p;
	first = NULL;					// Пока нет элементов, first указывает на NULL
	p = new List;					// Выделаем память под элемент
	cout << "Введите 1 элемент: ";
	cin >> p->data;					// Вводим его значение
	first = p;						// first указывает на первый элемент
	p->next = NULL;					// След элемент NULL, т.к. его нету
	p->prev = NULL;					// Предыдущий элемент NULL, т.к. это первый элемент
	for (int i = 2; i <= size; i++) {	// Начинаем со 2 элемента до размера, тк первый ввели выше
		List* h = new List;				// Выделяем память под новый элемент
		List* q = p;					// Для записи двух указателей
		p->next = h;					// Настраиваем указатель след элемента
		p = p->next;					// Переходим на след элемент
		cout << "Введите " << i << " элемент: ";
		cin >> p->data;					// Вводим значение
		p->next = NULL;					// Указатель след элемента NULL, тк след элемента нет
		p->prev = q;					// Указываем на прошлый элемент
	}
	return first;
}


void print(List*first) {					
	if (first == NULL) {             		// Проверка на пустоту списка
		cout << "Список пустой" << endl;
	}else{
		List* p = first;					
		while (p != NULL) {					// Идем до последнего элемента
			cout << p->data << " ";      	// Выводим значение элемента на котором находимся
			p = p->next;                    // Перемещаем указатель на след элемент
		}
		cout << endl;
	}
}

void del(List* &first) {
	List* p = first;
	char k; 
	cout << "Введите элемент, который необходимо удалить: " << endl;
	cin >> k;			
	while(p->data == k) { 						// Проверяем все подходящие с первой, идущие в ряд
		List* q = first; 						// Записываем в q данные первого элемента
		first = p->next;						// Первым элементом становится следующий
		delete q;								// Удаляем подходящий элемент
		p = first;								// Обнуляем p до нового первого элемента
		p->prev = NULL;							// Предыдущего больше нет, значит указатель становится NULL
	}
	while (p->next != NULL) {			/* Так как мы проверили все подходящие в начале
										Значит элемент на месте p не подходит =>
										Начинаем со следующего от p элемента
										Пока не пройдем все элементы*/
		if (p->next->data == k) {	
			List* q = p->next;			// Делаем замену только не с первым, а с p->next
			List* d = p->next->prev;	// Запоминаем в доп указатель, указатель предыдущего
			p->next = p->next->next;	// Сдвигаемся
			p->next->prev = d;			// Записываем указатель прошлого из удаленного элемента
			delete q;
		}
		else p = p->next;				// Иначе просто делаем сдвиг
	}
}

void add(List* &first, int n) {
	int k;
	cout << "Введите кол-во добавляемых элементов: " << endl;
	cin >> k;
	int x;
	cout << "Введите номер элемента перед которым необходимо добавить" << endl;
	cin >> x;
	List* p = first;
	char arr[k];
	for(int i=0;i<k;i++){
		cout << "Введите " << i+1 << " новый элемент: " << endl;
		cin >> arr[i];
	}
	if(x==1){								// Если надо добавить элементы в начало списка
		for (int i = k-1; i >= 0; i--) {
			List* h = new List;				// Создаем новый элемент
			h->data=arr[i];					// Записываем в него значение
			h->next = first;				// Простраиваем новые связи
			first->prev = h;
			h->prev = NULL;					// NULL тк у первого элемента нет предыдущего
			first = h;
			
		}
	}else{			
		for(int i=1;i<x-1;i++){				// Если надо добавить не в начало
			p=p->next;						// То сдвигаем p до необходимого элемента
		}									// После которого нужно добавить элементы
		for (int i = k-1; i >= 0; i--) {
			List* h = new List;				// Далее добавляем элементы
			h->data = arr[i];				// Как в случае с x==1, только
			h->next = p->next;				// Вместо first, p->next
			h->prev = p;					// Так как мы не в начале списка
			p->next->prev = h;
			p->next = h;
		}
	}
} 



int main() {
	setlocale(LC_ALL, "Rus");
	int size;
	cout << "Введите размер списка" << endl;
	cin >> size;
	
	List* list = make(size); 			// Функция создание списка
	cout << "Ваш список: " << endl;
	print(list);						// Функция вывода списка
	del(list);			   				// Функция удаления элемента с заданным ключом из списка
	cout << "Список после удаления: ";
	print(list);          				// Функция вывода списка
	add(list,size);						// Вызов функции с добавлением k элементов перед элементом с заданным номером
	cout << "Cписок c добавлением: ";
	print(list);       				   	// Функция вывода списка
	return 0;

}
